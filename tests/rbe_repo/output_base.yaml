# Steps in this file use toolchain configs produced by rbe_autoconf**
# targets. Their purpose is to verify the configs are usable on RBE.
# Tests below generate configs in the output_base and then
# use those for RBE builds.
steps:
# Builds rbe_autoconfig targets
- name: 'l.gcr.io/google/bazel'
  args:
  - build
  - --
  - "@rbe_autoconf_gcb_test//..."
  env: ['RBE_AUTOCONF_ROOT=/workspace']

# Tests rbe_autoconf, when output_base is used, produces outputs that are
# usable for an RBE build.
# This test uses the configs via their path in the output_base
- name: 'l.gcr.io/google/bazel'
  args:
  - --bazelrc=bazelrc/latest.bazelrc
  - test
  - --config=remote
  - --host_java_toolchain=@bazel_tools//tools/jdk:toolchain_hostjdk8
  - --java_toolchain=@bazel_tools//tools/jdk:toolchain_hostjdk8
  - --remote_instance_name=projects/asci-toolchain/instances/default_instance
  - //examples/remotebuildexecution/hello_world/cc:say_hello_test
  env: ['RBE_AUTOCONF_ROOT=/workspace']

# Tests rbe_autoconf, when output_base is used, produces outputs that are
# usable for an RBE build.
# This test uses the configs via their path in the external repo
- name: 'l.gcr.io/google/bazel'
  args:
  - --bazelrc=bazelrc/.bazelrc.notoolchain
  - test
  - --config=remote
  - --host_javabase=@rbe_autoconf_gcb_test//java:jdk
  - --javabase=@rbe_autoconf_gcb_test//java:jdk
  - --host_java_toolchain=@bazel_tools//tools/jdk:toolchain_hostjdk8
  - --java_toolchain=@bazel_tools//tools/jdk:toolchain_hostjdk8
  - --crosstool_top=@rbe_autoconf_gcb_test//cc:toolchain
  - --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
  - --extra_toolchains=@rbe_autoconf_gcb_test//config:cc-toolchain
  - --extra_execution_platforms=@rbe_autoconf_gcb_test//config:platform
  - --host_platform=@rbe_autoconf_gcb_test//config:platform
  - --platforms=@rbe_autoconf_gcb_test//config:platform
  - --remote_instance_name=projects/asci-toolchain/instances/default_instance
  - //examples/remotebuildexecution/hello_world/cc:say_hello_test
  env: ['RBE_AUTOCONF_ROOT=/workspace']

