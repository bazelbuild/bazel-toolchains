# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@io_bazel_rules_docker//container:container.bzl", _container_imge = "container")
load("@base_images_docker//package_managers:download_pkgs.bzl", _download_deb_pkgs = "download")
load("@base_images_docker//package_managers:apt_key.bzl", _apt_key = "key")

debian_pkgs_attrs = _container_imge.image.attrs + _apt_key.attrs + _download_deb_pkgs.attrs + {
    # Redeclare following attributes as non-mandatory.
    "image_tar": attr.label(
        allow_files = True,
        single_file = True,
    ),
    "image": attr.label(
        allow_files = True,
        single_file = True,
    ),
    "packages": attr.string_list(),
    "keys": attr.label_list(
        allow_files = True,
    ),
}

InstallableTarInfo = provider(fields = [
    "installables_tar",
])

def _generate_deb_tar(
        ctx,
        packages = None,
        additional_repos = None,
        keys = None,
        download_pkgs_output_tar = None,
        download_pkgs_output_script = None):
    """A function for producing a tarball.

    _generate_deb_tar function produces a tarball with all debian packages, additional_repos, and keys.

    Args:
      ctx: ctx as the same as for container_image + list of language_tool_layer(s)
      https://github.com/bazelbuild/rules_docker#container_image
      packages: packages aggregated from each language_tool_layer by toolchain_container rule
      additional_repos: additional_repos aggregated from each language_tool_layer by
      toolchain_container rule
      keys: keys aggregated from each language_tool_layer by toolchain_container rule
      download_pkgs_output_tar: output tar file generated by download_pkgs rule to
      override default output_tar name
      download_pkgs_output_script: output script generated by download_pkgs rule to
      override default output_script name
    """

    packages = packages or ctx.attr.packages
    additional_repos = additional_repos or ctx.attr.additional_repos
    keys = keys or ctx.attr.keys

    # Prepare base image for the download_pkgs rule.
    download_base = ctx.files.base[0]

    # Create an intermediate image with additional gpg keys used to download packages.
    if keys != []:
        image_with_keys = "%s_with_keys" % ctx.attr.name

        # Declare intermediate output file generated by add_apt_key rule.
        image_with_keys_output_executable = ctx.actions.declare_file(image_with_keys)
        image_with_keys_output_tarball = ctx.actions.declare_file(image_with_keys + ".tar")
        image_with_keys_output_layer = ctx.actions.declare_file(image_with_keys + "-layer.tar")

        _apt_key.implementation(
            ctx,
            name = image_with_keys,
            image_tar = ctx.files.base[0],
            keys = keys,
            output_executable = image_with_keys_output_executable,
            output_tarball = image_with_keys_output_tarball,
            output_layer = image_with_keys_output_layer,
        )
        download_base = image_with_keys_output_tarball

    # Declare intermediate output file generated by download_pkgs rule.
    download_pkgs_output_executable = ctx.actions.declare_file(ctx.attr.name + "-download_pkgs_output_executable.sh")
    if download_pkgs_output_tar:
        download_pkgs_output_tar = ctx.actions.declare_file(download_pkgs_output_tar)
    else:
        download_pkgs_output_tar = ctx.actions.declare_file(ctx.attr.name + ".tar")
    if download_pkgs_output_script:
        download_pkgs_output_script = ctx.actions.declare_file(download_pkgs_output_script)
    else:
        download_pkgs_output_script = ctx.actions.declare_file(ctx.attr.name + ".sh")

    # download_pkgs rule consumes 'packages' and 'additional_repos'.
    _download_deb_pkgs.implementation(
        ctx,
        image_tar = download_base,
        packages = packages,
        additional_repos = additional_repos,
        output_executable = download_pkgs_output_executable,
        output_tar = download_pkgs_output_tar,
        output_script = download_pkgs_output_script,
    )

    return struct(
        providers = [
            InstallableTarInfo(
                installables_tar = download_pkgs_output_tar,
            ),
        ],
    )

def _aggregate_debian_pkgs_impl(ctx):
    """Implementation for the aggregate_debian_pkgs rule.

    aggregate_debian_pkgs rule produces a tarball with all debian packages declared
    in the language_tool_layer(s) this rule depends on.

    Args:
      ctx: ctx as the same as for container_image + list of language_tool_layer(s)
      https://github.com/bazelbuild/rules_docker#container_image
    """

    # If the rule is used directly, aggregate packages, additional_repos, keys
    # from each language_tool_layer

    packages = []
    additional_repos = []
    keys = []

    for layer in ctx.attr.language_layers:
        packages.extend(layer.packages)
        additional_repos.extend(layer.additional_repos)
        keys.extend(layer.keys)

    packages.extend(ctx.attr.packages)
    additional_repos.extend(ctx.attr.additional_repos)
    keys.extend(ctx.files.keys)

    packages = depset(packages).to_list()
    additional_repos = depset(additional_repos).to_list()
    keys = depset(keys).to_list()

    return _generate_deb_tar(
        ctx,
        packages = packages,
        additional_repos = additional_repos,
        keys = keys,
    )

# Export _generate_deb_tar function for other bazel rules use.
aggregate = struct(
    attrs = debian_pkgs_attrs,
    outputs = _download_deb_pkgs.outputs,
    implementation = _generate_deb_tar,
)

aggregate_debian_pkgs = rule(
    attrs = debian_pkgs_attrs + {
        "language_layers": attr.label_list(),
    },
    outputs = _download_deb_pkgs.outputs,
    implementation = _aggregate_debian_pkgs_impl,
)
"""Aggregate debian packages from multiple language_tool_layers into a tarball.

Args:
  Same args as https://github.com/bazelbuild/rules_docker#container_image-1
  minus:
    debs: debian packages should be listed in 'packages', or be included in
          'installables_tar' as .deb files.
  plus:
    language_layers: a list of language_tool_layer.

Only name, base, and language_layers arguments are used in this rule.

Experimental rule.
"""
